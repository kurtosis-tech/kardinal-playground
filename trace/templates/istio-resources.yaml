apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: voting-app-gateway
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: voting-app-vs
spec:
  hosts:
  - "*"
  gateways:
  - voting-app-gateway
  http:
  - match:
    - headers:
        x-kardinal-destination:
          exact: "voting-app-ui-dev"
    route:
    - destination:
        host: voting-app-ui
        subset: dev
  - route:
    - destination:
        host: voting-app-ui
        subset: prod
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: voting-app-ui
spec:
  host: voting-app-ui
  subsets:
  - name: prod
    labels:
      version: prod
  - name: dev
    labels:
      version: dev
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: voting-app-redis-vs
spec:
  hosts:
  - voting-app-redis
  http:
  - match:
    - sourceLabels:
        app: voting-app-ui
        version: dev
    route:
    - destination:
        host: voting-app-redis
        subset: dev
  - match:
    - sourceLabels:
        app: voting-app-ui
        version: prod
    route:
    - destination:
        host: voting-app-redis
        subset: prod
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: voting-app-redis
spec:
  host: voting-app-redis
  subsets:
  - name: prod
    labels:
      version: prod
  - name: dev
    labels:
      version: dev
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: kardinal-tracing
  namespace: istio-system
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()
              local trace_id = headers:get("x-kardinal-trace-id")
              local hostname = headers:get(":authority")

              request_handle:logInfo("Processing request - Initial trace ID: " .. (trace_id or "none") .. ", Hostname: " .. (hostname or "none"))

              if not trace_id then
                trace_id = string.format("%032x", math.random(2^128 - 1))
                request_handle:logInfo("Generated new trace ID: " .. trace_id)

                local generate_headers, generate_body = request_handle:httpCall(
                  "outbound|8080||trace-router.kardinal.svc.cluster.local",
                  {
                    [":method"] = "GET",
                    [":path"] = "/generate-trace-id",
                    [":authority"] = "trace-router.kardinal.svc.cluster.local"
                  },
                  "",
                  5000
                )

                if generate_headers and generate_headers[":status"] == "200" then
                  trace_id = generate_body
                  request_handle:logInfo("Received trace ID from trace-router: " .. trace_id)
                else
                  request_handle:logWarn("Failed to get trace ID from trace-router, using generated: " .. trace_id)
                end

                request_handle:headers():add("x-kardinal-trace-id", trace_id)

                local set_route_headers, set_route_body = request_handle:httpCall(
                  "outbound|8080||trace-router.kardinal.svc.cluster.local",
                  {
                    [":method"] = "POST",
                    [":path"] = "/set-route",
                    [":authority"] = "trace-router.kardinal.svc.cluster.local",
                    ["Content-Type"] = "application/json"
                  },
                  string.format('{"trace_id": "%s", "hostname": "%s", "destination": "voting-app-ui-prod"}', trace_id, hostname),
                  5000
                )

                if not set_route_headers or set_route_headers[":status"] ~= "200" then
                  request_handle:logWarn("Failed to set initial route: " .. tostring(set_route_headers and set_route_headers[":status"]))
                end
              end

              local determine_headers, determine_body = request_handle:httpCall(
                "outbound|8080||trace-router.kardinal.svc.cluster.local",
                {
                  [":method"] = "GET",
                  [":path"] = "/route?trace_id=" .. trace_id .. "&hostname=" .. hostname,
                  [":authority"] = "trace-router.kardinal.svc.cluster.local"
                },
                "",
                5000
              )

              local destination
              if determine_headers and determine_headers[":status"] == "200" then
                destination = determine_body
                request_handle:logInfo("Determined destination: " .. destination)
              else
                destination = hostname .. "-prod"
                request_handle:logWarn("Failed to determine destination, using fallback: " .. destination)
              end

              request_handle:headers():add("x-kardinal-destination", destination)
              request_handle:logInfo("Final headers - Trace ID: " .. trace_id .. ", Destination: " .. destination)
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: inbound-trace-id-check
  namespace: kardinal
spec:
  workloadSelector:
    labels:
      app: voting-app-ui
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()
              local trace_id = headers:get("x-kardinal-trace-id")
              
              if not trace_id then
                request_handle:respond(
                  {[":status"] = "400"},
                  "Missing required x-kardinal-trace-id header"
                )
              end
            end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: outbound-trace-router
  namespace: kardinal
spec:
  workloadSelector:
    labels:
      app: voting-app-ui
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_OUTBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.lua
        typed_config:
          "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
          inlineCode: |
            function envoy_on_request(request_handle)
              local headers = request_handle:headers()
              local trace_id = headers:get("x-kardinal-trace-id")
              local hostname = headers:get(":authority")
              
              if trace_id then
                local destination = determine_destination(request_handle, trace_id, hostname)
                headers:add("x-kardinal-destination", destination)
              end
            end

            function determine_destination(request_handle, trace_id, hostname)
              local headers, body = request_handle:httpCall(
                "outbound|8080||trace-router.kardinal.svc.cluster.local",
                {
                  [":method"] = "GET",
                  [":path"] = "/route?trace_id=" .. trace_id .. "&hostname=" .. hostname,
                  [":authority"] = "trace-router.kardinal.svc.cluster.local"
                },
                "",
                5000
              )
              
              if not headers then
                return hostname .. "-prod"  -- Fallback to prod
              end
              
              return body
            end
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: require-trace-id
spec:
  selector:
    matchLabels:
      app: voting-app-ui
  action: DENY
  rules:
    - when:
        - key: request.headers[x-kardinal-trace-id]
          notValues: ["*"]
