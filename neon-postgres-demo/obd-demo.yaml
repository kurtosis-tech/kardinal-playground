apiVersion: apps/v1
kind: Deployment
metadata:
  name: cartservice-v1
  labels:
    app: cartservice
    version: v1
spec:
  selector:
    matchLabels:
      app: cartservice
      version: v1
  template:
    metadata:
      labels:
        app: cartservice
        version: v1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - all
            privileged: false
            readOnlyRootFilesystem: true
          image: tedim52/newobd-cartservice:0.0.1
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8090
          readinessProbe:
            httpGet:
              path: /health
              port: 8090
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 8090
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          env:
            # if POSTGRES is set, uses this to connect
            # otherwise uses environment variables below
            - name: POSTGRES
              value: ""
            - name: PORT
              value: "8090"
            - name: DB_USERNAME
              value: "postgresuser"
            - name: DB_PASSWORD
              value: "postgrespass"
            - name: DB_HOST
              value: "postgres"
            - name: DB_PORT
              value: "5432"
            - name: DB_NAME
              value: "cart"
---
apiVersion: v1
kind: Service
metadata:
  name: cartservice
  labels:
    app: cartservice
    version: v1
  annotations:
    kardinal.dev.service/plugins: "neon-postgres-db"
spec:
  type: ClusterIP
  selector:
    app: cartservice
  ports:
    - name: http
      port: 8090
      targetPort: 8090
      protocol: TCP
      appProtocol: HTTP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-v1
  labels:
    app: frontend
    version: v1
spec:
  selector:
    matchLabels:
      app: frontend
      version: v1
  template:
    metadata:
      labels:
        app: frontend
        version: v1
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      containers:
        - name: server
          image: kurtosistech/frontend:main
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          readinessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
                - name: "Cookie"
                  value: "shop_session-id=x-readiness-probe"
          livenessProbe:
            initialDelaySeconds: 10
            httpGet:
              path: "/_healthz"
              port: 8080
              httpHeaders:
                - name: "Cookie"
                  value: "shop_session-id=x-liveness-probe"
          env:
            - name: ADDRESS
              value: ":8080"
            - name: FREECURRENCYAPIKEY
              value: ""
            - name: CARTSERVICEHOST
              value: cartservice
            - name: PRODUCTCATALOGSERVICEHOST
              value: productcatalogservice
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
    version: v1
  annotations:
    kardinal.dev.service/dependencies: "productcatalogservice:http,cartservice:http"
    kardinal.dev.service/plugins: "neon-postgres-db"
spec:
  type: ClusterIP
  selector:
    app: frontend
  ports:
    - name: http
      port: 80
      protocol: TCP
      appProtocol: HTTP
      targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: productcatalogservice-v1
  labels:
    app: productcatalogservice
    version: v1
spec:
  selector:
    matchLabels:
      app: productcatalogservice
      version: v1
  template:
    metadata:
      labels:
        app: productcatalogservice
        version: v1
    spec:
      terminationGracePeriodSeconds: 5
      containers:
        - name: server
          image: kurtosistech/productcatalogservice:main
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8070
          readinessProbe:
            httpGet:
              path: /health
              port: 8070
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 8070
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          env:
            - name: PORT
              value: "8070"
---
apiVersion: v1
kind: Service
metadata:
  name: productcatalogservice
  labels:
    app: productcatalogservice
    version: v1
spec:
  type: ClusterIP
  selector:
    app: productcatalogservice
  ports:
    - name: http
      port: 8070
      targetPort: 8070
      protocol: TCP
      appProtocol: HTTP

---
apiVersion: gateway.networking.k8s.io/v1
kind: Gateway
metadata:
  name: gateway
  annotations:
    kardinal.dev.service/gateway: "true"
spec:
  gatewayClassName: istio
  listeners:
    - name: default
      hostname: "*.app.localhost"
      port: 8888
      protocol: HTTP
      allowedRoutes:
        namespaces:
          from: All

---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: http
  annotations:
    kardinal.dev.service/route: "true"
spec:
  parentRefs:
    - name: gateway
  hostnames: ["prod.app.localhost"]
  rules:
    - matches:
        - path:
            type: PathPrefix
            value: /
      backendRefs:
        - name: frontend
          port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: neon-postgres-db
  annotations:
    kardinal.dev.service/plugin-definition: |
      - name: github.com/kurtosis-tech/neondb-plugin
        type: external
        servicename: neon-postgres-db
        args:
          NEON_API_KEY: ""
          NEON_PROJECT_ID: ""
          NEON_FORK_FROM_BRANCH_ID: ""
